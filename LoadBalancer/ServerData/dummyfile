#!/usr/bin/python
################################################################################
# The Frenetic Project                                                         #
# frenetic@frenetic-lang.org                                                   #
################################################################################
# Licensed to the Frenetic Project by one or more contributors. See the        #
# NOTICES file distributed with this work for additional information            #
# regarding copyright and ownership. The Frenetic Project licenses this        #
# file to you under the following license.                                     #
#                                                                              #
# Redistribution and use in source and binary forms, with or without           #
# modification, are permitted provided the following conditions are met:       #
# - Redistributions of source code must retain the above copyright             #
#   notice, this list of conditions and the following disclaimer.              #
# - Redistributions in binary form must reproduce the above copyright          #
#   notice, this list of conditions and the following disclaimer in            #
#   the documentation or other materials provided with the distribution.       #
# - The names of the copyright holds and contributors may not be used to       #
#   endorse or promote products derived from this work without specific        #
#   prior written permission.                                                  #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT    #
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the     #
# LICENSE file distributed with this work for specific language governing      #
# permissions and limitations under the License.                               #
################################################################################
# /src/tests/graph_delta_test.py                                               #
# tests /src/examples/graph_delta                                              #
# $Id$ #
################################################################################
import unittest
import networkx as nx
import copy

import sys
import os

scriptd = os.path.realpath(os.path.dirname(sys.argv[0])).split('/')
parent = reduce(lambda s,n: s+'/'+n, scriptd[1:-1], "")
sys.path.append(parent)
sys.path.append(parent+"/examples")
from graph_delta import *

DEFAULT_EDGES = [(1,2), (1,3), (2,4)]
class GraphDeltaTestCase(unittest.TestCase):
    def assert_graph_equal(self, expected, result):
        self.assertEquals(result.nodes(data=True), expected.nodes(data=True))
        self.assertEquals(result.edges(data=True), expected.edges(data=True))

    def test_choke_on_null_node(self):
        try:
            x = NodeAddition(None)
            self.fail()
        except(GraphDeltaException):
            pass

    def test_add_edge(self):
        source_node = 1
        source_port = 100
        dest_node = 1000
        dest_port = 101

        g = nx.Graph()
        g.add_edges_from(DEFAULT_EDGES)

        expected = copy.deepcopy(g)
        expected.add_edge(source_node, dest_node,\
            source_port = source_port, dest_port = dest_port)
        delta = EdgeAddition(source_node, source_port, dest_node, dest_port)

        result = delta.effect(g)

        self.assert_graph_equal(expected, result)

    def test_add_node(self):
        source_node = 1000

        g = nx.Graph()
        g.add_edges_from(DEFAULT_EDGES)

        expected = copy.deepcopy(g)
        expected.add_node(source_node, ports=set())
        delta = NodeAddition(source_node)

        result = delta.effect(g)

        self.assert_graph_equal(expected, result)

    def test_add_node_no_clobber(self):
        g = nx.Graph()

        node = 7
        value = "value!"
        
        g.add_node(node, ports=value)

        delta = NodeAddition(node)
        
        result = delta.effect(g)

        self.assert_graph_equal(g, result)

    def test_remove_node(self):
        source_node = (DEFAULT_EDGES[0])[0]

        g = nx.Graph()
        g.add_edges_from(DEFAULT_EDGES)

        expected = copy.deepcopy(g)
        expected.remove_node(source_node)
        delta = NodeDeletion(source_node)

        result = delta.effect(g)

        self.assert_graph_equal(expected, result)

    def test_log_port(self):
        source_node = 1000

        g = nx.DiGraph()
        g.add_node(source_node, ports=set())

        expected = copy.deepcopy(g)
        expected.add_node(source_node, ports=set([1]))
        delta = PortAddition(source_node, 1)

        result = delta.effect(g)

        self.assert_graph_equal(expected, result)

    def test_port_addition_gracefull_catch_invalid_node(self):
        g = nx.Graph()

        d = PortAddition(73, 4)

        expected = copy.copy(g)
        expected.add_node(73, ports=set([4]))

        result = d.effect(g)
        self.assert_graph_equal(expected, result)

    def test_port_addition_catch_non_set(self):
        g = nx.Graph()
        node = 7
        g.add_node(node, ports=3)

        d = PortAddition(node, 1)

        try:
            d.effect(g)
            self.fail()
        except(GraphDeltaException):
            pass

    def test_port_addition_no_choke_on_no_set(self):
        g = nx.Graph()
        node = 7
        g.add_node(node)

        d = PortAddition(node, 1)

        d.effect(g)

    def test_port_deletion(self):
        s_node = 1000
        s_port = 1
        d_node = 2000
        d_port = 2

        g = nx.DiGraph()
        g.add_node(s_node, ports = set([s_port]))
        g.add_node(d_node, ports = set([d_port]))
        g.add_edge(s_node, d_node, source_port = s_port, dest_port = d_port)
        g.add_edge(d_node, s_node, source_port = d_port, dest_port = s_port)

        expected = copy.deepcopy(g)
        expected.remove_edge(s_node, d_node)
        expected.remove_edge(d_node, s_node)
        expected.node[s_node]['ports'].remove(s_port)

        delta = PortDeletion(s_node, s_port)

        result = delta.effect(g)
        
        self.assert_graph_equal(expected,result)

    def test_port_deletion_catch_invalid_node(self):
        g = nx.Graph()

        d = PortDeletion(73, 4)

        try:
            d.effect(g)
            self.fail()
        except(GraphDeltaException):
            pass

    def test_port_deletion_catch_non_set(self):
        g = nx.Graph()
        node = 7
        g.add_node(node, ports=3)

        d = PortDeletion(node, 1)

        try:
            d.effect(g)
            self.fail()
        except(GraphDeltaException):
            pass

    def test_port_deletion_no_choke_on_no_set(self):
        g = nx.Graph()
        node = 7
        g.add_node(node)

        d = PortDeletion(node, 1)

        d.effect(g)

    def test_edge_addition_catch_bad_nodes(self):
        try:
            x = EdgeAddition(None, 2, 3, 4)
            self.fail()
        except(GraphDeltaException):
            pass
        try:
            EdgeAddition(1, 2, None, 4)
            self.fail()
        except(GraphDeltaException):
            pass

def main():
    suite = unittest.makeSuite(GraphDeltaTestCase, 'test')
    runner = unittest.TextTestRunner()
    runner.run(suite)

if __name__ == "__main__":
    main()
